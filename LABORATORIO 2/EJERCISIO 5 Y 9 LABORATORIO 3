//EJERCISIO 5 LABORATORIO 3
#include <iostream>
using namespace std;

struct nodo{
    int dato;
    nodo *sig;
};

class ListaSimple{
private:
    nodo *pInicio;
    
public:
    ListaSimple(void);
    void insAntes_1(int, int);
    void insertarInicioLista(int);
    void mostrarLista(void);
    void mostrarListaRec(void);
    void mostrarListaRec(nodo *);
     void mostrarListaRecD(void);
    void mostrarListaRecD(nodo *);
    void insFinal(int);
  
};

ListaSimple::ListaSimple(void) {
    pInicio = NULL;
}


void ListaSimple::insAntes_1(int dato, int datoRef) {
    nodo *nuevo, *p, *q;

    nuevo = new nodo;
    nuevo->dato = dato;

    p = pInicio;
    q = NULL;
    while (p != NULL && p->dato != datoRef) {
        q = p;
        p = p->sig;
    }
    if (q == NULL) {
        if (p == NULL) {
            cout << "Insertaste el primero" << endl;
            pInicio = nuevo;
            pInicio->sig = NULL;
        } else {
            cout << "Dato de referencia esta al principio" << endl;
            pInicio = nuevo;
            pInicio->sig = p;
        }
    } else {
        if (p == NULL) {
            cout << "Dato de referencia no encontrado" << endl;
            q->sig = nuevo;
            nuevo->sig = NULL;
        } else {
            cout << "Dato insertado a mitad de la lista" << endl;
            q->sig = nuevo;
            nuevo->sig = p;
        }
    }
}

void ListaSimple::insertarInicioLista(int dato) {
    nodo *nuevo;

    nuevo = new nodo;
    nuevo->dato = dato;
    nuevo->sig = pInicio;
    pInicio = nuevo;
}

void ListaSimple::mostrarLista(void) {
    nodo *s = pInicio;

    cout << "Los elementos de la lista son:" << endl;
    while (s != NULL) {
        cout << s->dato << " ";
        s = s->sig;
    }
}

void ListaSimple::mostrarListaRec(void) {
    mostrarListaRec(pInicio);
}

void ListaSimple::mostrarListaRec(nodo *s) {
    if (s != NULL) {
        mostrarListaRec(s->sig);
        cout << s->dato << " ";
    }
}


void ListaSimple::mostrarListaRecD(void) {
    mostrarListaRecD(pInicio);
}

void ListaSimple::mostrarListaRecD(nodo *s) {
    if (s != NULL) {
        cout << s->dato << " ";
        mostrarListaRecD(s->sig);
    }
}

void ListaSimple::insFinal(int dato) {
    nodo *p, *q;

    nodo *nuevo = new nodo;
    nuevo->dato = dato;
    nuevo->sig = NULL;
    if (pInicio == NULL) {
        pInicio = nuevo;
    } else {
        p = pInicio;
        q = NULL;
        while (p != NULL) {
            q = p;
            p = p->sig;
        }
        q->sig = nuevo;
    }
}

int main(void)
{
    ListaSimple miLista;
    char resp;
    int dato, datoRef, datoBuscar;
    
    cout << "Desea meter un dato (s/n)?";
    cin>> resp;
    while(resp == 's'){
        cout << "Digite el dato: ";
        cin >> dato;
        cout << "Antes de cual vas a insertarlo? ";
        cin >> datoRef;
        miLista.insAntes_1(dato, datoRef); 
        cout << "Desea meter un dato (s/n)?";
        cin>> resp;
    }    
    
     cout << "\nMostrar lista en sentido directo:" << endl;
    miLista.mostrarListaRecD();
     cout << "\nMostrar lista en sentido inverso:" << endl;
    miLista.mostrarListaRec();
    
    
    return 0;
}

//EJERCISIO 9  LABORATORIO 3
#include <iostream>
#include <string>
using namespace std;

struct TPersona{
    int isbn;
    string Nombre;
    string Apellido;
    string Edad;
    string Carnet;
    string Telefono;
    string Correo;
};
typedef struct TPersona Persona;

Persona solicitarPersona(){
    Persona p;
    
    cout << "ISBN: "; cin >> p.isbn;
    cin.ignore();
    cout << "Nombre de la persona: "; getline(cin, p.Nombre);
    cout << "Apellido de la persona: "; getline(cin, p.Apellido);
    cout << "Edad de la persona: "; getline(cin, p.Edad);
    cout << "Carnet de la persona: "; getline(cin, p.Carnet);
    cout << "Telefono de la persona: "; getline(cin, p.Telefono);
    cout << "Correo de la persona: "; getline(cin, p.Correo);   
	return p; 
}
void mostrarPersona(Persona p){
    cout << "ISBN: " << p.isbn << endl;
    cout << "Nombre de la persona: " << p.Nombre << endl;
    cout << "Apellido de la persona: " << p.Apellido << endl;
    cout << "Edad de la persona: " << p.Edad << endl;
    cout << "Carnet de la persona: " << p.Carnet << endl;
    cout << "Telefono de la persona: "; getline(cin, p.Telefono);
    cout << "Correo de la persona: " << p.Correo << endl;
}

struct TNodo{
    Persona dato;
    struct TNodo *sig;
};
typedef struct TNodo Nodo;
Nodo *pInicio;

void insertarInicio(Persona p) {
    Nodo *nuevo = new Nodo;
    nuevo->dato = p;
    nuevo->sig = pInicio;
    
    pInicio = nuevo;
}

void insertarFinal(Persona p) {
    Nodo *nuevo = new Nodo;
    nuevo->dato = p;
    nuevo->sig = NULL;
    
    if (pInicio == NULL) {
        pInicio = nuevo;
    } else {
        Nodo *p = pInicio;
        Nodo *q = NULL;
        while (p != NULL) {
            q = p;
            p = p->sig;
        }
        q->sig = nuevo;
    }
}

void agregarPersona(){
    Persona p = solicitarPersona();
    bool continuar = true;
    do{
        int opcion = 0;
        cout << "\t1) Al principio\n\t2) Al final"
            << "\n\tOpcion elegida: ";
        cin >> opcion;
        switch(opcion){
            case 1: insertarInicio(p);
                continuar = false;
            break;
            case 2: insertarFinal(p);
                continuar = false;
            break;
            default: cout << "Opcion erronea!" << endl;
            break;
        }
    }while(continuar);
}

void mostrarLista() {
    Nodo *s = pInicio;

    while (s != NULL) {
        mostrarPersona(s->dato);
        s = s->sig;
    }
}

void eliminarPersona(){
    int unISBN = 0;
    cout << "ISBN de registro de persona  a eliminar: ";
    cin >> unISBN;
    
    Nodo *p = pInicio, *q = NULL;
    
    while(p != NULL && (p->dato).isbn != unISBN){
        q = p;
        p = p->sig;
    }
    if(p == NULL){
        cout << "Registro de persona  a borrar NO existe" << endl;
        return;
    }
    if(q == NULL)
        pInicio = p->sig;
    else
        q->sig = p->sig;
    delete(p);
    cout << "Registro de persona borrado!" << endl;
}


int main(){
    cout << "Inicializando..." << endl;
    pInicio = NULL;
    
    bool continuar = true;
    do{
        int opcion = 0;
       
        cout << "Menu: \n\t1) Agregar registro de una persona\n\t2) Eliminar registro de una persona"
            << "\n\t3) Actualizar registro de una persona\n\t4) Mostrar registro"
            << "\n\t5) Salir\n\tOpcion elegida: ";    
        cin >> opcion;
        switch(opcion){
            case 1: cout << "Agregando..." << endl;
                agregarPersona(); 
            break;
            case 2: cout << "Eliminando..." << endl;
                 eliminarPersona();
            break;
            case 3: cout << "Actualizando..." << endl;
               
            break;
            case 4: cout << "Mostrando Lista..." << endl;
               mostrarLista();
            break;
            case 5: continuar = false;
            break;
            default: cout << "Opcion erronea!" << endl;
            break;
        }
        
    }while(continuar);

    return 0;
}
